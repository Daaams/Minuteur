import Head from 'next/head'
import { useEffect, useState } from 'react'
import CubeHeures from '../components/CubeHeures.js'
import CubeSecondes from '../components/CubeSecondes.js'
import CubeMinutes from '../components/CubeMinutes.js'
import styles from '../styles/Home.module.scss'
import boutons from '../styles/Boutons.module.css'


export default function Home() {

  const [secondes, setSecondes] = useState(0);
  const [minutes, setMinutes] = useState(0);
  const [heures, setHeures] = useState(0);
  const [activ, setActive] = useState(false);

  useEffect( ()=>{
    if (activ) {
      setTimeout(()=>{
        if (secondes < 59) {
          setSecondes(secondes+1)          
        }
        if (secondes == 59) {
          setSecondes(s => 0)
          setMinutes(m => m+1)
        }
        if (minutes == 59 && secondes == 59) {
          setMinutes(m => 0)
          setHeures(h => h+1)
        }
      }, 1000) 
    }
  })

  function demarrerTemps(){
    setActive(true);
  }
  function stopTemps(){
    setActive(false);
  }
  function reinitialiserTemps(){
    setActive(false);
    setHeures(0);
    setMinutes(0);
    setSecondes(0);
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={boutons.container}>
          <button onClick={demarrerTemps}>Demarer</button>
          <button onClick={reinitialiserTemps}>Reinitialiser</button>
          <button onClick={stopTemps}>Stop</button>
        </div>
        <div className={styles.chrono}>
          <CubeHeures heures={heures} minutes={minutes} secondes={secondes}/>
          <p className={styles.separateur}>:</p>
          <CubeMinutes minutes={minutes} secondes={secondes}/>
          <p className={styles.separateur}>:</p>
          <CubeSecondes secondes={secondes} active={activ}/>
        </div>
        <svg>
          <filter id='wavy'>
            <feTurbulence x="0" y="0" baseFrequency={0.009} numOctaves="5" seed={2}>
            <animate attributeName='baseFrequency' dur={60} values='0.02;0.005;0.02' repeatCount='indefinite'></animate>
            </feTurbulence>
            <feDisplacementMap in="SourceGraphic" scale={30}></feDisplacementMap>
          </filter>
        </svg>
      </main>
    </div>
  )
}
